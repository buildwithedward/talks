{"prompt":"Write a Rust function that checks whether a given number is prime or not.","response":"```rust\nfn is_prime(n: u32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    \n    for i in 2..(n as f64).sqrt() as u32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```\nHere, we define a function called `is_prime` that takes an unsigned integer `n` as input. Inside the function, we first check if `n` is less than 2. If it is, we return `false` because prime numbers are greater than 1. Then, we use a `for` loop to iterate from 2 to the square root of `n` (casted to `f64`) plus 1. In each iteration, we check if `n` is divisible by the current value of `i`. If it is, we return `false` because `n` is not a prime number. Finally, if the loop completes without finding any divisors, we return `true` to indicate that `n` is a prime number."}
{"prompt":"Write a Rust function that calculates the factorial of a given non-negative integer.","response":"```rust\nfn factorial(n: u32) -> u32 {\n    if n == 0 {\n        return 1;\n    }\n    \n    let mut result = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    \n    return result;\n}\n```\nHere, we define a function called `factorial` that takes a non-negative integer `n` as input. Inside the function, we first check if `n` is equal to 0. If it is, we return 1 because the factorial of 0 is defined to be 1. Otherwise, we initialize a variable `result` with the initial value of 1. Then, we use a `for` loop to iterate from 1 to `n` (inclusive). In each iteration, we multiply the current value of `result` by the current value of `i` and assign the result back to `result`. Finally, we return the value of `result` as the factorial of `n`."}
{"prompt":"Write a Rust function that calculates the sum of all elements in a given array of integers.","response":"```rust\nfn sum_array(arr: &[i32]) -> i32 {\n    let mut sum = 0;\n    for &num in arr {\n        sum += num;\n    }\n    return sum;\n}\n```\nIn this code, we define a function called `sum_array` that takes a slice of integers `arr` as input. Inside the function, we initialize a variable `sum` with 0 to keep track of the sum of all elements. Then, we use a `for` loop to iterate over each element `num` in the array. In each iteration, we add the value of `num` to the current value of `sum`. Finally, we return the value of `sum` as the sum of all elements in the array."}
